<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" xmlns:Custom="http://metro.mahapps.com/winfx/xaml/controls" xmlns:Custom1="http://metro.mahapps.com/winfx/xaml/shared">
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
	<SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
	<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
	<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
	<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
	<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
	<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
	<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
	<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
    <!-- Button Play -->
	<Style x:Key="ButtonPlayStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true"/>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="border" Value="White"/>
			
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
							<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <!-- Button Filter -->
    <Style x:Key="ButtonFilterStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="10">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="White"/>
    </Style>
    <!-- Filter Music Style -->
	<Style x:Key="ButtonFilterMusicStyle" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#FF41B1E1"/>
            </Trigger>
        </Style.Triggers>     
        <Setter Property="MinHeight" Value="25"/>
		<Setter Property="FontWeight" Value="Bold"/>
		<Setter Property="FontSize" Value="{DynamicResource UpperCaseContentFontSize}"/>
		<Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="Background" Value="#FF181515"/>
		<Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
        <Setter Property="Foreground" Value="White"/>
		<Setter Property="Padding" Value="5,6"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
											<SplineDoubleKeyFrame KeyTime="0" Value="0.7"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusRectangle">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusInnerRectangle">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unfocused"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0"/>
						<Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0"/>
                        <Border x:Name="MouseOverBorder" BorderThickness="0" Background="#FF181515" CornerRadius="0" Opacity="0"/>
                        <Border x:Name="PressedBorder" BorderThickness="0" Background="#FF181515" CornerRadius="0" Opacity="0"/>
                        <Border x:Name="FocusRectangle" Margin="0" Opacity="0" BorderThickness="0" Background="#FF181515"/>
						<Border x:Name="FocusInnerRectangle" Margin="0" Opacity="0" BorderThickness="0"/>
						<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content, Converter={Custom1:ToUpperConverter}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style> 
    
    <!-- ItemContainerStyle pour ListBoxWrap (Video)-->
    <Style TargetType="{x:Type ListBoxItem}" x:Key="WrapBoxVideoContainer">
        <Setter Property="ContentTemplate" Value="{StaticResource WrapVideoTemplateItem}" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource WrapVideoTemplatedSelected}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ItemContainerStyle pour ListBoxVideo (Image)-->
    <Style TargetType="{x:Type ListBoxItem}" x:Key="WrapBoxImageContainer">
        <Setter Property="ContentTemplate" Value="{StaticResource WrapImageTemplateItem}" />
    </Style>
    
    <!-- ComboBox Item -->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Foreground" Value="White"/>
    	<Setter Property="Background" Value="#FF181515"/>
		<Setter Property="FontSize" Value="10"/>
		<Setter Property="FontWeight" Value="Bold"/>
		<Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="19" />
	</Style>

	<!-- ComboBox -->
	<Style x:Key="ComboBoxMediaStyle" TargetType="{x:Type ComboBox}">
    	<Setter Property="MinHeight" Value="26"/>
    	<Setter Property="Foreground" Value="#FF41B1E1"/>
    	<Setter Property="Background" Value="#FF181515"/>
    	<Setter Property="HorizontalContentAlignment" Value="Left"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="Padding" Value="0"/>
    	<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    	<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    	<Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
    	<Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}"/>
    	<Setter Property="FontSize" Value="16"/>
		<Setter Property="FontWeight" Value="Bold"/>
    	<Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItemStyle}"/>
    	<Setter Property="SnapsToDevicePixels" Value="True"/>
    	<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ComboBox}">
    				<Grid>
    					<Grid.Resources>
    						<Style x:Key="comboToggleStyle" TargetType="{x:Type ToggleButton}">
    							<Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
    							<Setter Property="Background" Value="{DynamicResource GrayBrush10}"/>
    							<Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
    							<Setter Property="BorderThickness" Value="1"/>
    							<Setter Property="Padding" Value="3"/>
    							<Setter Property="Template">
    								<Setter.Value>
    									<ControlTemplate TargetType="{x:Type ToggleButton}">
    										<Grid>
    											<VisualStateManager.VisualStateGroups>
    												<VisualStateGroup x:Name="CommonStates">
    													<VisualState x:Name="Normal"/>
    													<VisualState x:Name="MouseOver"/>
    													<VisualState x:Name="Pressed"/>
    													<VisualState x:Name="Disabled"/>
    												</VisualStateGroup>
    												<VisualStateGroup x:Name="FocusStates">
    													<VisualState x:Name="Focused"/>
    													<VisualState x:Name="Unfocused"/>
    												</VisualStateGroup>
    											</VisualStateManager.VisualStateGroups>
    											<Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
    											<Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource WhiteBrush}" IsHitTestVisible="False" Opacity="0"/>
    											<Border x:Name="MouseOverBorder" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource GrayBrush8}" Opacity="0"/>
    											<Border x:Name="PressedBorder" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource GrayBrush7}" Opacity="0"/>
    											<Rectangle x:Name="FocusRectangle" Opacity="0" Stroke="{DynamicResource ComboBoxMouseOverInnerBorderBrush}"/>
    											<Rectangle x:Name="FocusVisualElement" IsHitTestVisible="False" Margin="1" Stroke="{DynamicResource HighlightBrush}" StrokeThickness="1" Visibility="Collapsed"/>
    											<Grid Margin="1">
    												<Grid.ColumnDefinitions>
    													<ColumnDefinition Width="*"/>
    													<ColumnDefinition Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Grid}}}"/>
    													<ColumnDefinition Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Grid}}}"/>
    												</Grid.ColumnDefinitions>
    												<Button x:Name="PART_ClearText" Content="r" Grid.Column="1" Foreground="{TemplateBinding Foreground}" FontSize="16" FontFamily="Marlett" IsTabStop="False" Style="{DynamicResource ChromelessButtonStyle}">
    													<Button.Visibility>
    														<Binding Path="(Custom:TextboxHelper.ClearTextButton)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}">
    															<Binding.Converter>
    																<BooleanToVisibilityConverter/>
    															</Binding.Converter>
    														</Binding>
    													</Button.Visibility>
    												</Button>
    												<Rectangle x:Name="BtnArrowBackground" Grid.Column="2" Fill="Transparent" StrokeThickness="0"/>
    												<Path x:Name="BtnArrow" Grid.Column="2" Data="F1M301.14,-189.041L311.57,-189.041 306.355,-182.942 301.14,-189.041z" Fill="{DynamicResource GrayBrush1}" HorizontalAlignment="Center" Height="4" IsHitTestVisible="False" Stretch="Uniform" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Width="8"/>
    											</Grid>
    										</Grid>
    										<ControlTemplate.Triggers>
    											<Trigger Property="IsMouseOver" SourceName="BtnArrowBackground" Value="True">
    												<Setter Property="Fill" TargetName="BtnArrowBackground" Value="{DynamicResource GrayBrush5}"/>
    											</Trigger>
    											<Trigger Property="IsMouseOver" SourceName="PART_ClearText" Value="True">
    												<Setter Property="Background" TargetName="PART_ClearText" Value="{DynamicResource GrayBrush8}"/>
    												<Setter Property="Foreground" TargetName="PART_ClearText" Value="{DynamicResource AccentColorBrush}"/>
    											</Trigger>
    											<Trigger Property="IsPressed" SourceName="PART_ClearText" Value="True">
    												<Setter Property="Background" TargetName="PART_ClearText" Value="{DynamicResource BlackBrush}"/>
    												<Setter Property="Foreground" TargetName="PART_ClearText" Value="{DynamicResource WhiteBrush}"/>
    											</Trigger>
    										</ControlTemplate.Triggers>
    									</ControlTemplate>
    								</Setter.Value>
    							</Setter>
    						</Style>
    					</Grid.Resources>
    					<VisualStateManager.VisualStateGroups>
    						<VisualStateGroup x:Name="CommonStates">
    							<VisualState x:Name="Normal"/>
    							<VisualState x:Name="MouseOver"/>
    							<VisualState x:Name="Disabled">
    								<Storyboard>
    									<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DisabledVisualElement">
    										<SplineDoubleKeyFrame KeyTime="0" Value="0.45"/>
    									</DoubleAnimationUsingKeyFrames>
    								</Storyboard>
    							</VisualState>
    						</VisualStateGroup>
    						<VisualStateGroup x:Name="FocusStates">
    							<VisualState x:Name="Focused"/>
    							<VisualState x:Name="Unfocused"/>
    							<VisualState x:Name="FocusedDropDown"/>
    						</VisualStateGroup>
    					</VisualStateManager.VisualStateGroups>
    					<Grid>
    						<Grid.ColumnDefinitions>
    							<ColumnDefinition Width="*"/>
    							<ColumnDefinition Width="0*"/>
    							<ColumnDefinition Width="0*"/>
    						</Grid.ColumnDefinitions>
    						<ToggleButton x:Name="PART_DropDownToggle" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="3" IsTabStop="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0" Style="{DynamicResource comboToggleStyle}" VerticalAlignment="Stretch"/>
    						<Border x:Name="EditableTextBoxBorder" BorderBrush="Transparent" BorderThickness="1,1,0,1" Background="{DynamicResource ControlBackgroundBrush}" Margin="0,0,-2,0" Visibility="Collapsed">
    							<TextBox x:Name="PART_EditableTextBox" BorderThickness="0" Background="{x:Null}" Foreground="{TemplateBinding Foreground}" Focusable="True" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalAlignment="Stretch" IsReadOnly="{TemplateBinding IsReadOnly}" Margin="0,0,0,-2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Custom:TextboxHelper.Watermark="{TemplateBinding Custom:TextboxHelper.Watermark}"/>
    						</Border>
    						<Grid x:Name="ContentSite" Margin="0,0,0,0">
    							<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    						</Grid>
    					</Grid>
    					<Rectangle x:Name="FocusRectangle" Opacity="0" Stroke="{DynamicResource ComboBoxMouseOverInnerBorderBrush}"/>
    					<Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource DisabledWhiteBrush}" IsHitTestVisible="False" Opacity="0"/>
    					<Popup x:Name="PART_Popup" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
    						<Border x:Name="PopupBorder" BorderBrush="Green" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto">
    							<ScrollViewer x:Name="DropDownScrollViewer" BorderThickness="0" Margin="-1" Padding="0">
    								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"/>
    							</ScrollViewer>
    						</Border>
    					</Popup>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<DataTrigger Binding="{Binding (Custom:TextboxHelper.ClearTextButton), RelativeSource={RelativeSource Self}}" Value="False">
    						<Setter Property="Grid.ColumnSpan" TargetName="EditableTextBoxBorder" Value="2"/>
    						<Setter Property="Grid.ColumnSpan" TargetName="ContentSite" Value="2"/>
    					</DataTrigger>
    					<Trigger Property="IsEditable" Value="True">
    						<Setter Property="IsTabStop" Value="False"/>
    						<Setter Property="Visibility" TargetName="EditableTextBoxBorder" Value="Visible"/>
    						<Setter Property="Visibility" TargetName="ContentSite" Value="Hidden"/>
    						<Setter Property="Focusable" TargetName="PART_DropDownToggle" Value="False"/>
    						<Setter Property="Background" TargetName="PART_DropDownToggle" Value="Transparent"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>

	<!-- Menu -->

    <Style x:Key="MenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderBrush" Value="Red"/>
        <Setter Property="BorderThickness" Value="5"/>

        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="../assets/menu-icon-blanc.png"/>
            </Setter.Value>
        </Setter>
        <Setter Property="OpacityMask">
            <Setter.Value>
                <ImageBrush ImageSource="../assets/menu-icon-blanc.png"/>
            </Setter.Value>
        </Setter>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="#FF181515" BorderBrush="Transparent" BorderThickness="0">
                        <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>
    
    <Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Height="26" VerticalAlignment="Center" Background="#FF181515" BorderBrush="Transparent" BorderThickness="0">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="10" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" MinWidth="90" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="5"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                x:Name="HeaderHost"              
                                RecognizesAccessKey="True"
                                ContentSource="Header"
                                VerticalAlignment="Center" />

                            <!-- Content for the menu IGT -->
                            <ContentPresenter Grid.Column="2"
                                x:Name="IGTHost"
                                ContentSource="InputGestureText"
                                VerticalAlignment="Center"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" />
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup AllowsTransparency="True" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="None">
                                <Border x:Name="SubMenuBorder" BorderBrush="Transparent" BorderThickness="0" Padding="0">
                                    <Grid x:Name="SubMenu">
                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="Foreground" Value="White"/>

                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="#FF0d3548" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="false">
                            <Setter Property="Background" Value="#FF181515" TargetName="Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>